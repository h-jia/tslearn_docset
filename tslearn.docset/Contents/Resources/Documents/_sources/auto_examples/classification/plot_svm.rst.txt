
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/classification/plot_svm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_classification_plot_svm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_classification_plot_svm.py:


SVM and GAK
===========

This example illustrates the use of the global alignment kernel (GAK) for
support vector classification.

This metric is defined in the :ref:`tslearn.metrics <mod-metrics>` module and
explained in details in [1].

In this example, a `TimeSeriesSVC` model that uses GAK as kernel is fit and the
support vectors for each class are reported.


[1] M. Cuturi, "Fast global alignment kernels," ICML 2011.

.. GENERATED FROM PYTHON SOURCE LINES 18-50



.. image:: /auto_examples/classification/images/sphx_glr_plot_svm_001.svg
    :alt: Support vectors for class 1, Support vectors for class 2, Support vectors for class 3, Support vectors for class 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Correct classification rate: 1.0






|

.. code-block:: default


    # Author: Romain Tavenard
    # License: BSD 3 clause

    import numpy
    import matplotlib.pyplot as plt

    from tslearn.datasets import CachedDatasets
    from tslearn.preprocessing import TimeSeriesScalerMinMax
    from tslearn.svm import TimeSeriesSVC

    numpy.random.seed(0)
    X_train, y_train, X_test, y_test = CachedDatasets().load_dataset("Trace")
    X_train = TimeSeriesScalerMinMax().fit_transform(X_train)
    X_test = TimeSeriesScalerMinMax().fit_transform(X_test)

    clf = TimeSeriesSVC(kernel="gak", gamma=.1)
    clf.fit(X_train, y_train)
    print("Correct classification rate:", clf.score(X_test, y_test))

    n_classes = len(set(y_train))

    plt.figure()
    support_vectors = clf.support_vectors_
    for i, cl in enumerate(set(y_train)):
        plt.subplot(n_classes, 1, i + 1)
        plt.title("Support vectors for class %d" % cl)
        for ts in support_vectors[i]:
            plt.plot(ts.ravel())

    plt.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  40.308 seconds)


.. _sphx_glr_download_auto_examples_classification_plot_svm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_svm.py <plot_svm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_svm.ipynb <plot_svm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
