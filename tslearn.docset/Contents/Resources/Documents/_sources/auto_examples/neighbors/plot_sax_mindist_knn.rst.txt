
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/neighbors/plot_sax_mindist_knn.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_neighbors_plot_sax_mindist_knn.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_neighbors_plot_sax_mindist_knn.py:


1-NN with SAX + MINDIST
=======================

This example presents a comparison between k-Nearest Neighbor runs with k=1.
It compares the use of:
* MINDIST (see [1]) on SAX representations of the data.
* Euclidean distance on the raw values of the time series.

The comparison is based on test accuracy using several benchmark datasets.

[1] Lin, Jessica, et al. "Experiencing SAX: a novel symbolic
    representation of time series." Data Mining and knowledge
    discovery 15.2 (2007): 107-144.

.. GENERATED FROM PYTHON SOURCE LINES 17-120




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    |      dataset       | sax error  |  sax time  | eucl error | eucl time  |
    --------------------------------------------------------------------------
    |    SyntheticControl|        0.03|     6.77407|        0.12|      0.0385|
    |            GunPoint|     0.20667|     0.93664|     0.08667|     0.01798|
    |            FaceFour|     0.14773|     0.54596|     0.21591|     0.00928|
    |          Lightning2|     0.19672|      1.4398|      0.2459|      0.0108|
    |          Lightning7|     0.46575|     1.08103|     0.42466|     0.01587|
    |              ECG200|        0.12|     0.85509|        0.12|     0.01317|
    |               Plane|     0.04762|     1.40197|      0.0381|     0.01469|
    |                 Car|        0.35|     1.54677|     0.26667|     0.01051|
    |                Beef|     0.53333|     0.22146|     0.33333|     0.00479|
    |              Coffee|     0.46429|     0.23715|         0.0|     0.00423|
    |            OliveOil|     0.83333|     0.32914|     0.13333|     0.00494|
    --------------------------------------------------------------------------






|

.. code-block:: default


    # Author: Gilles Vandewiele
    # License: BSD 3 clause

    import warnings
    import time

    import numpy
    import matplotlib.pyplot as plt
    from scipy.stats import norm

    from tslearn.datasets import UCR_UEA_datasets
    from tslearn.preprocessing import TimeSeriesScalerMeanVariance
    from tslearn.neighbors import KNeighborsTimeSeriesClassifier

    from sklearn.base import clone
    from sklearn.metrics import pairwise_distances, accuracy_score
    from sklearn.neighbors import KNeighborsClassifier


    warnings.filterwarnings('ignore')


    def print_table(accuracies, times):
        """Utility function to pretty print the obtained accuracies"""
        header_str = '|'
        header_str += '{:^20}|'.format('dataset')
        columns = ['sax error', 'sax time', 'eucl error', 'eucl time']
        for col in columns:
            header_str += '{:^12}|'.format(col)
        print(header_str)
        print('-'*(len(columns) * 13 + 22))

        for dataset in accuracies:
            acc_sax, acc_euclidean = accuracies[dataset]
            time_sax, time_euclidean = times[dataset]
            sax_error = numpy.around(1 - acc_sax, 5)
            eucl_error = numpy.around(1 - acc_euclidean, 5)
            time_sax = numpy.around(time_sax, 5)
            time_euclidean = numpy.around(time_euclidean, 5)
            s = '|'
            s += '{:>20}|'.format(dataset)
            s += '{:>12}|'.format(sax_error)
            s += '{:>12}|'.format(time_sax)
            s += '{:>12}|'.format(eucl_error)
            s += '{:>12}|'.format(time_euclidean)
            print(s.strip())

        print('-'*(len(columns) * 13 + 22))


    # Set seed
    numpy.random.seed(0)

    # Defining dataset and the number of segments
    data_loader = UCR_UEA_datasets()
    datasets = [
        ('SyntheticControl', 16),
        ('GunPoint', 64),
        ('FaceFour', 128),
        ('Lightning2', 256),
        ('Lightning7', 128),
        ('ECG200', 32),
        ('Plane', 64),
        ('Car', 256),
        ('Beef', 128),
        ('Coffee', 128),
        ('OliveOil', 256)
    ]

    # We will compare the accuracies & execution times of 1-NN using:
    # (i) MINDIST on SAX representations, and
    # (ii) euclidean distance on raw values
    knn_sax = KNeighborsTimeSeriesClassifier(n_neighbors=1, metric='sax')
    knn_eucl = KNeighborsTimeSeriesClassifier(n_neighbors=1, metric='euclidean')

    accuracies = {}
    times = {}
    for dataset, w in datasets:
        X_train, y_train, X_test, y_test = data_loader.load_dataset(dataset)

        ts_scaler = TimeSeriesScalerMeanVariance()
        X_train = ts_scaler.fit_transform(X_train)
        X_test = ts_scaler.fit_transform(X_test)

        # Fit 1-NN using SAX representation & MINDIST
        metric_params = {'n_segments': w, 'alphabet_size_avg': 10}
        knn_sax = clone(knn_sax).set_params(metric_params=metric_params)
        start = time.time()
        knn_sax.fit(X_train, y_train)
        acc_sax = accuracy_score(y_test, knn_sax.predict(X_test))
        time_sax = time.time() - start

        # Fit 1-NN using euclidean distance on raw values
        start = time.time()
        knn_eucl.fit(X_train, y_train)
        acc_euclidean = accuracy_score(y_test, knn_eucl.predict(X_test))
        time_euclidean = time.time() - start

        accuracies[dataset] = (acc_sax, acc_euclidean)
        times[dataset] = (time_sax, time_euclidean)

    print_table(accuracies, times)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  50.884 seconds)


.. _sphx_glr_download_auto_examples_neighbors_plot_sax_mindist_knn.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sax_mindist_knn.py <plot_sax_mindist_knn.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sax_mindist_knn.ipynb <plot_sax_mindist_knn.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
