
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/classification/plot_early_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_classification_plot_early_classification.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_classification_plot_early_classification.py:


Early Classification
====================

This example presents the concept of early classification.

Early classifiers are implemented in the 
:mod:`tslearn.early_classification` module and in this example 
we use the method from [1].


[1] A. Dachraoui, A. Bondu & A. Cornuejols. Early classification of time
series as a non myopic sequential decision making problem. ECML/PKDD 2015

.. GENERATED FROM PYTHON SOURCE LINES 16-40

.. code-block:: default


    # Author: Romain Tavenard
    # License: BSD 3 clause
    # sphinx_gallery_thumbnail_number = 2

    import numpy
    import matplotlib.pyplot as plt

    from tslearn.preprocessing import TimeSeriesScalerMeanVariance
    from tslearn.early_classification import NonMyopicEarlyClassifier
    from tslearn.datasets import UCR_UEA_datasets

    def plot_partial(time_series, t, y_true=0, y_pred=0, color="k"):
        plt.plot(time_series[:t+1].ravel(), color=color, linewidth=1.5)
        plt.plot(numpy.arange(t+1, time_series.shape[0]),
                 time_series[t+1:].ravel(),
                 linestyle="dashed", color=color, linewidth=1.5)
        plt.axvline(x=t, color=color, linewidth=1.5)
        plt.text(x=t - 20, y=time_series.max() - .25, s="Prediction time")
        plt.title(
            "Sample of class {} predicted as class {}".format(y_true, y_pred)
        )
        plt.xlim(0, time_series.shape[0] - 1)








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Data loading and visualization
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 43-63

.. code-block:: default


    numpy.random.seed(0)
    X_train, y_train, X_test, y_test = UCR_UEA_datasets().load_dataset("ECG200")

    # Scale time series
    X_train = TimeSeriesScalerMeanVariance().fit_transform(X_train)
    X_test = TimeSeriesScalerMeanVariance().fit_transform(X_test)

    size = X_train.shape[1]
    n_classes = len(set(y_train))

    plt.figure()
    for i, cl in enumerate(set(y_train)):
        plt.subplot(n_classes, 1, i + 1)
        for ts in X_train[y_train == cl]:
            plt.plot(ts.ravel(), color="orange" if cl > 0 else "blue", alpha=.3)
        plt.xlim(0, size - 1)
    plt.suptitle("Training time series")
    plt.show()




.. image:: /auto_examples/classification/images/sphx_glr_plot_early_classification_001.svg
    :alt: Training time series
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-69

Model fitting
-------------

As observed in the following figure, the optimal classification time as
estimated by `NonMyopicEarlyClassifier` is data-dependent.

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default


    early_clf = NonMyopicEarlyClassifier(n_clusters=3,
                                         cost_time_parameter=1e-3,
                                         lamb=1e2,
                                         random_state=0)
    early_clf.fit(X_train, y_train)

    preds, times = early_clf.predict_class_and_earliness(X_test)

    plt.figure()
    plt.subplot(2, 1, 1)
    ts_idx = 0
    t = times[ts_idx]
    plot_partial(X_test[ts_idx], t, y_test[ts_idx], preds[ts_idx], color="orange")


    plt.subplot(2, 1, 2)
    ts_idx = 9
    t = times[ts_idx]
    plot_partial(X_test[ts_idx], t, y_test[ts_idx], preds[ts_idx], color="blue")
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/classification/images/sphx_glr_plot_early_classification_002.svg
    :alt: Sample of class 1 predicted as class 1, Sample of class -1 predicted as class -1
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-98

Earliness-Accuracy trade-off
----------------------------

The trade-off between earliness and accuracy is controlled via
``cost_time_parameter``.

.. GENERATED FROM PYTHON SOURCE LINES 98-114

.. code-block:: default


    plt.figure()
    hatches = ["///", "\\\\\\", "*"]
    for i, cost_t in enumerate([1e-4, 1e-3, 1e-2]):
        early_clf.set_params(cost_time_parameter=cost_t)
        early_clf.fit(X_train, y_train)
        preds, times = early_clf.predict_class_and_earliness(X_test)
        plt.hist(times,
                 alpha=.5, hatch=hatches[i],
                 density=True,
                 label="$\\alpha={}$".format(cost_t),
                 bins=numpy.arange(0, size, 5))
    plt.legend(loc="upper right")
    plt.xlim(0, size - 1)
    plt.xlabel("Prediction times")
    plt.title("Impact of cost_time_parameter ($\\alpha$)")
    plt.show()


.. image:: /auto_examples/classification/images/sphx_glr_plot_early_classification_003.svg
    :alt: Impact of cost_time_parameter ($\alpha$)
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.108 seconds)


.. _sphx_glr_download_auto_examples_classification_plot_early_classification.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_early_classification.py <plot_early_classification.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_early_classification.ipynb <plot_early_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
